# Indicates that this is the root configuration file for ESLint, 
# and that ESLint should not look for further configuration files in parent directories.

root: true

# Specifies the environments in which the code will run,
# enabling global variables specific to those environments.

env:

  # Enables global variables for the browser environment, 
  # such as `window` and `document`.

  browser: true

  # Enables global variables for the Node.js environment, 
  # such as `process` and `require`.

  node: true

# Defines specific ESLint rules for the project.

rules:

  # Enforces the use of camelCase naming convention for variables and functions.

  camelcase: error

  # Disallows the use of `console.log()` and other `console` methods to 
  # prevent debugging code in production.

  no-console: error

  # Disallows throwing literals like `throw 1` or `throw "error"`,
  # and prefers throwing instances of Error.

  no-throw-literal: error

  # Avoids the use of "magic numbers" (numeric literals without explanation)
  # in the code.

  no-magic-numbers: error

  # Disallows variable declarations that shadow variables in outer scopes.

  no-shadow: error

  # Avoids unnecessary ternary operations, such as `x ? x : y`,
  # which can be simplified.

  no-unneeded-ternary: error

  # Disallows the use of computed property names in objects when not needed.

  no-useless-computed-key: error

  # Disallows unnecessary constructors in classes that do not have specific logic.

  no-useless-constructor: error

  # Disallows unnecessary renaming in destructuring and imports.

  no-useless-rename: error

  # Avoids unnecessary `return` statements in functions, such as `return;`
  # in a function that doesn’t need to return anything.

  no-useless-return: error

  # Disallows the use of the `void` operator, which is often unclear and unnecessary.

  no-void: error

  # Encourages using `Object.prototype.hasOwnProperty.call` instead of directly
  # accessing the `hasOwnProperty` method.

  prefer-object-has-own: error

  # Encourages using template strings (`${}`) instead of string concatenation.

  prefer-template: error

  # Requires specifying the radix (base) when using `parseInt()`,
  # to avoid ambiguities.
  
  radix: error

  # Disallows the use of the `as` operator for type assertions.

  "@typescript-eslint/consistent-type-assertions": [ "error", { "assertionStyle": "never" } ]

# Specifies the base configurations to extend.

extends:

  # Uses ESLint’s recommended rules.

  - eslint:recommended

  # Uses the recommended rules from the TypeScript ESLint plugin
  # for TypeScript projects.
  
  - plugin:@typescript-eslint/recommended

# Specifies the parser to use for parsing TypeScript code,
# rather than the default ESLint parser.

parser: '@typescript-eslint/parser'

# Defines options specific to the parser.

parserOptions:

  # Uses the latest ECMAScript version, enabling the most
  # recent language features. 

  ecmaVersion: latest

  # Sets the source type to `module`, allowing the use of ES modules.

  sourceType: module

  # Specifies the path to the tsconfig.json file for the TypeScript project.

  project: './tsconfig.json'

overrides:

  - files:

    # Specify the file where assertions are allowed

      - 'libs/@ueye/core/guards/type.guard.ts'

    rules:

      # Disable the rule for this specific file

      '@typescript-eslint/consistent-type-assertions': 'off'

  - files:

       # Target all Typescript files in the libs directory and its subdirectories

      - "libs/**/*.ts"
      
    env:

      # Disable Node.js environment globals for these files

      node: false

    rules:

      no-restricted-globals:

        # Set the severity of the rule to 'error'

        - error

        # Restrict the global variable `process`

        - name: process
          message: "Avoid using Node.js global variable `process` in the libs directory."

         # Restrict the global variable `__dirname`

        - name: __dirname
          message: "Avoid using Node.js global variable `__dirname` in the libs directory."

        # Restrict the global variable `global`

        - name: global
          message: "Avoid using Node.js global variable `global` in the libs directory."

        # Restrict the global variable `Buffer`

        - name: Buffer
          message: "Avoid using Node.js global variable `Buffer` in the libs directory."

        # Restrict the global variable `filename`

        - name: filename
          message: "Avoid using Node.js global variable `filename` in the libs directory."

        # Restrict the function `setImmediate`

        - name: setImmediate
          message: "Avoid using Node.js global function `setImmediate` in the libs directory."

        # Restrict the function `clearImmediate`

        - name: clearImmediate
          message: "Avoid using Node.js global function `clearImmediate` in the libs directory."