{
  "forbidden": [

    // -->  Module Dependency Rules

    /* [Rule]: Core should not depend on Infra */

    {
      "name": "no-dependencies-from-core-to-infra",
      "comment": "Core should not depend on Infra.",
      "from": { "path": "^libs/@ueye/core/" },
      "to": { "path": "^libs/@ueye/infra/" },
      "severity": "error"
    },

    // -->  Module Type Restrictions

    /* [Rule]: Libraries should not use Node.js specific modules or APIs */

    {
      "name": "no-nodejs-usage",
      "comment": "Libraries should not use Node.js specific modules or APIs.",
      "from": { "path": "^libs/@ueye/" },
      "to": {
        "path": "^(:node|fs|path|os|http|https|stream|child_process|util|events|crypto|buffer|querystring|url|zlib|tls|dgram|dns|net|readline|repl|vm|assert|async_hooks|cluster|console|constants|domain|module|process|punycode|string_decoder|sys|timers|trace_events|tty|v8|worker_threads|wasi)$" // Destination path pattern for Node.js modules
      },
      "severity": "error"
    },

    /* [Rule]: Libraries should not import from node_modules */

    {
      "name": "no-node-modules-in-libs",
      "comment": "Libraries should not import from node_modules.",
      "from": { "path": "^libs/@ueye/" },
      "to": { "path": "node_modules/" },
      "severity": "error"
    },


    // -->  Dependency Management

    /* [Rule]: Warn about circular dependencies */

    {
      "name": "no-circular",
      "severity": "warn",
      "comment": "This dependency is part of a circular relationship. You might want to revise your solution (i.e., use dependency inversion, make sure the modules have a single responsibility).",
      "from": {},
      "to": {
        "circular": true
      }
    },

    /* [Rule]: Warn about orphan modules */

    {
      "name": "no-orphans",
      "comment": "This is an orphan module - it's likely not used (anymore?). Either use it or remove it. If it's logical this module is an orphan (i.e., it's a config file), add an exception for it in your dependency-cruiser configuration. By default, this rule does not scrutinize dot-files (e.g., .eslintrc.js), TypeScript declaration files (.d.ts), tsconfig.json, and some of the Babel and Webpack configs.",
      "severity": "warn",
      "from": {
        "orphan": true,
        "pathNot": [
          "(^|/)[.][^/]+[.](?:js|cjs|mjs|ts|cts|mts|json)$",
          "[.]d[.]ts$",
          "(^|/)tsconfig[.]json$",
          "(^|/)(?:babel|webpack)[.]config[.](?:js|cjs|mjs|ts|cts|mts|json)$"
        ]
      },
      "to": {}
    },

    /* [Rule]: Warn about dependencies on deprecated core modules */

    {
      "name": "no-deprecated-core",
      "comment": "A module depends on a Node core module that has been deprecated. Find an alternative - these are bound to exist - Node doesn't deprecate lightly.",
      "severity": "warn",
      "from": {},
      "to": {
        "dependencyTypes": ["core"],
        "path": [
          "^v8/tools/codemap$",
          "^v8/tools/consarray$",
          "^v8/tools/csvparser$",
          "^v8/tools/logreader$",
          "^v8/tools/profile_view$",
          "^v8/tools/profile$",
          "^v8/tools/SourceMap$",
          "^v8/tools/splaytree$",
          "^v8/tools/tickprocessor-driver$",
          "^v8/tools/tickprocessor$",
          "^node-inspect/lib/_inspect$",
          "^node-inspect/lib/internal/inspect_client$",
          "^node-inspect/lib/internal/inspect_repl$",
          "^async_hooks$",
          "^punycode$",
          "^domain$",
          "^constants$",
          "^sys$",
          "^_linklist$",
          "^_stream_wrap$"
        ]
      }
    },

    /* [Rule]: Warn about dependencies on deprecated npm modules */

    {
      "name": "not-to-deprecated",
      "comment": "This module uses a (version of an) npm module that has been deprecated. Either upgrade to a later version of that module or find an alternative. Deprecated modules are a security risk.",
      "severity": "warn",
      "from": {},
      "to": {
        "dependencyTypes": ["deprecated"]
      }
    },

    /* [Rule]: Disallow dependencies not listed in package.json */

    {
      "name": "no-non-package-json",
      "severity": "error",
      "comment": "This module depends on an npm package that isn't in the \"dependencies\" section of your package.json. That's problematic as the package either (1) won't be available on live or (2 - worse) will be available on live with a non-guaranteed version. Fix it by adding the package to the dependencies in your package.json.",
      "from": {},
      "to": {
        "dependencyTypes": [
          "npm-no-pkg",
          "npm-unknown"
        ]
      }
    },

    /* [Rule]: Disallow dependencies that cannot be resolved */

    {
      "name": "not-to-unresolvable",
      "comment": "This module depends on a module that cannot be found (\"resolved to disk\"). If it's an npm module: add it to your package.json. In all other cases you likely already know what to do.",
      "severity": "error",
      "from": {},
      "to": {
        "couldNotResolve": true
      }
    },

    /* [Rule]: Warn about duplicate dependency types */

    {
      "name": "no-duplicate-dep-types",
      "comment": "Likely this module depends on an external (\"npm\") package that occurs more than once in your package.json, i.e., both as a devDependencies and in dependencies. This will cause maintenance problems later on.",
      "severity": "warn",
      "from": {},
      "to": {
        "moreThanOneDependencyType": true,
        "dependencyTypesNot": ["type-only"]
      }
    },


    // -->  Code Organization

    /* [Rule]: Disallow dependencies on test files from non-test files */

    {
      "name": "not-to-test",
      "comment": "This module depends on code within a folder that should only contain tests. As tests don't implement functionality, this is odd. Either you're writing a test outside the test folder or there's something in the test folder that isn't a test.",
      "severity": "error",
      "from": {
        "pathNot": "^(tests)"
      },
      "to": {
        "path": "^(tests)"
      }
    },

    /* [Rule]: Disallow dependencies on spec (test) files */

    {
      "name": "not-to-spec",
      "comment": "This module depends on a spec (test) file. The sole responsibility of a spec file is to test code. If there's something in a spec that's of use to other modules, it doesn't have that single responsibility anymore. Factor it out into (e.g., a separate utility/helper or a mock).",
      "severity": "error",
      "from": {},
      "to": {
        "path": "[.](?:spec|test)[.](?:js|mjs|cjs|jsx|ts|mts|cts|tsx)$"
      }
    },

    /* [Rule]: Disallow dependencies on devDependencies from production code */

    {
      "name": "not-to-dev-dep",
      "severity": "error",
      "comment": "This module depends on an npm package from the \"devDependencies\" section of your package.json. It looks like something that ships to production, though. To prevent problems with npm packages that aren't there on production, declare it (only!) in the \"dependencies\" section of your package.json. If this module is development only, add it to the from.pathNot rule of the not-to-dev-dep rule in the dependency-cruiser configuration.",
      "from": {
        "path": "^(libs)",
        "pathNot": "[.](?:spec|test)[.](?:js|mjs|cjs|jsx|ts|mts|cts|tsx)$"
      },
      "to": {
        "dependencyTypes": ["npm-dev"],
        "dependencyTypesNot": ["type-only"],
        "pathNot": ["node_modules/@types/"]
      }
    },

    /* [Rule]: Inform about usage of optional dependencies */

    {
      "name": "optional-deps-used",
      "severity": "info",
      "comment": "This module depends on an npm package that is declared as an optional dependency in your package.json. As this makes sense in limited situations only, it's flagged here. If you're using an optional dependency here by design, add an exception to your dependency-cruiser configuration.",
      "from": {},
      "to": {
        "dependencyTypes": ["npm-optional"]
      }
    },

    /* [Rule]: Warn about usage of peer dependencies */

    {
      "name": "peer-deps-used",
      "comment": "This module depends on an npm package that is declared as a peer dependency in your package.json. This makes sense if your package is e.g., a plugin, but in other cases - maybe not so much. If the use of a peer dependency is intentional, add an exception to your dependency-cruiser configuration.",
      "severity": "warn",
      "from": {},
      "to": {
        "dependencyTypes": ["npm-peer"]
      }
    }
  ],

  "options": {

    /* Do not follow dependencies in node_modules */

    "doNotFollow": {
      "path": ["node_modules"]
    },

    /* Include TypeScript pre-compilation dependencies */

    "tsPreCompilationDeps": true,

    
    /* Specify TypeScript configuration file */

    "tsConfig": {
      "fileName": "tsconfig.json"
    },

    /* Enhanced resolve options for module resolution */
 
    "enhancedResolveOptions": {

      /* Fields to consider for exports */

      "exportsFields": ["exports"], 

      /* Condition names for resolution */

      "conditionNames": ["import", "require", "node", "default", "types"], 

      /* Main fields for resolution */
      "mainFields": ["main", "types", "typings"]

    },

    /* Options for reporters */

    "reporterOptions": {

      /* Options for the dot reporter */

      "dot": {

        /* Pattern to collapse in the dot reporter */

        "collapsePattern": "node_modules/(?:@[^/]+/[^/]+|[^/]+)"
      },

      /* Options for the archi reporter */

      "archi": {

        /* Pattern to collapse in the archi reporter */

        "collapsePattern": "^(?:packages|src|lib(s?)|app(s?)|bin|test(s?)|spec(s?))/[^/]+|node_modules/(?:@[^/]+/[^/]+|[^/]+)"
      },

      /* Options for the text reporter */

      "text": {

        /* Highlight focused modules in the text reporter */

        "highlightFocused": true
      }
    }
  }
}